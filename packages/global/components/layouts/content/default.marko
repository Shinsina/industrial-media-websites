import { get, getAsArray } from "@parameter1/base-cms-object-path";
import defaultValue from "@parameter1/base-cms-marko-core/utils/default-value";
import getContentPreview from "@parameter1/base-cms-marko-web-theme-monorail/utils/get-content-preview";
import verifyNonEmptyHTML from '../../../utils/verify-non-empty-html';


$ const { site } = out.global;
$ const {
  id,
  type,
  pageNode,
  showReadNextBlock,
  showBottomAdBlock,
  showTopStoryBlock,
  ...rest
} = input;
$ const sections = getAsArray(input, "sections");
$ const belowContentSections = getAsArray(input, "belowContentSections");

$ const displayPrimaryImage = defaultValue(input.displayPrimaryImage, true);
$ const displayPublishedDate = ["company", "contact", "whitepaper"].includes(type) ? false : true;
$ const displayReadNext = showReadNextBlock && ["article"].includes(type);
$ const displaySocialShare = ["contact"].includes(type) ? false : true;
$ const displayComments = (site.get('identityX.comments.enabled') && !["contact"].includes(type)) ? true : false;
$ const displayNewsletterSignup = ["contact"].includes(type) ? false : true;
$ const shouldInjectAds = ["article", "video", "news", "podcast"].includes(type);
$ const displayTranscript = content.transcript && verifyNonEmptyHTML(content.transcript);

<global-content-wrapper-layout
  id=id
  type=type
  page-node=pageNode
  ...rest
>
  <@section|{ blockName, content, aliases }| modifiers=["content-header"]>
    $ const { primarySection } = content;
    <div class="content-page-header" role="region" aria-label="Content Information">
      <theme-content-page-breadcrumbs section=primarySection />
      <marko-web-content-name tag="h1" block-name=blockName obj=content />
      <marko-web-content-teaser tag="p" class="page-wrapper__deck" obj=content />
      $ const contentContactLength = ["authors", "contributors", "photographers"].reduce((num, field) => {
        const contacts = getAsArray(content, `${field}.edges`);
        return num + contacts.length;
      }, 0);

      $ const authors = getAsArray(content, "authors.edges");

      <if(type !== "contact")>
        <theme-content-attribution obj=content />
      </if>

      <if(type === "events" || type === "webinars" || displayPublishedDate)>
        <theme-page-dates|{ blockName }|>
          <if(type === "event")>
            <marko-web-content-starts block-name=blockName obj=content />
            <marko-web-content-ends block-name=blockName obj=content />
          </if>
          <else-if(type === "webinar")>
            <marko-web-content-starts block-name=blockName obj=content />
          </else-if>
          <else-if(displayPublishedDate)>
            <theme-content-published-node block-name=blockName obj=content display-updated-date=false />
          </else-if>
        </theme-page-dates>
      </if>
    </div>
  </@section>

  <@section|{ aliases, content, authors }| modifiers=["content-body"]>
    $ const { primarySection } = content;
    <div class="row">
      <div class="col-lg-8">
        <div class="content-page-body" role="region" aria-label="Content Body">
          <theme-page-contents|{ blockName }| attrs={ "data-gallery-id": id }>
            <if(content.embedCode)>
              <global-content-embed-code block-name=blockName content=content />
              <if(displayTranscript)>
                <marko-web-link href=`#transcript-${id}` class="btn btn-transcript mt-block mb-2" title="Transcript">
                  <marko-web-icon name="file" modifiers=["lg"] /> Transcript
                </marko-web-link>
              </if>
            </if>
            <else-if(type === "media-gallery")>
              <!-- <marko-web-image-slider images=images /> -->
            </else-if>
            <else-if(type === "document")>
              <theme-primary-image-block
                obj=content.primaryImage
                force-display="right"
              />
            </else-if>
            <else-if(displayPrimaryImage)>
              $ let forceDisplay;
              $ if (type === "contact") forceDisplay = "left";
              $ if (type === "video") forceDisplay = "none";
              <theme-primary-image-block
                obj=content.primaryImage
                force-display=forceDisplay
                fluid-width=700
              />
            </else-if>

            $ const requiresRegistration = get(content, "userRegistration.isCurrentlyRequired");
            $ const accessLevels = getAsArray(content, "userRegistration.accessLevels");

            <marko-web-identity-x-access|context|
              enabled=requiresRegistration
              required-access-level-ids=accessLevels
            >
              <if(!context.canAccess || context.requiresUserInput)>
                $ const body = getContentPreview({ body: content.body, selector: "p:nth-of-type(1)" });
                <marko-web-content-body block-name=blockName obj={ body } />

                <div class="content-page-preview-overlay" />
                <theme-content-page-gate
                  can-access=context.canAccess
                  is-logged-in=context.isLoggedIn
                  has-required-access-level=context.hasRequiredAccessLevel
                  requires-access-level=context.requiresAccessLevel
                  requires-user-input=context.requiresUserInput
                  messages=context.messages
                />
              </if>
              <else>
                $ const bodyId = `content-body-${content.id}`;
                $ const desktopCounts = [350, 1500, 2750, 4500, 6250, 8000, 9750, 11500, 13250, 15000, 16750, 18500];
                $ const mobileCounts = [250, 1650, 2950, 4250, 5550, 6850, 8150, 9450, 10750, 12050, 13350, 14650, 15950, 17250];
                <if(shouldInjectAds)>
                  <theme-gam-inject-ads selector=`#${bodyId}` detect-embeds=true>
                    <for|char| of=desktopCounts>
                      <!-- desktop/tablet only -->
                      <@inject
                        at=char
                        name="inline-content-desktop"
                        aliases=aliases
                        modifiers=["max-width-970", "margin-auto-x", "inline-content"]
                      />
                    </for>

                    <for|char| of=mobileCounts>
                      <!-- mobile only -->
                      <@inject
                        at=char
                        name="inline-content-mobile"
                        aliases=aliases
                        modifiers=["max-width-970", "margin-auto-x", "inline-content"]
                      />
                    </for>
                  </theme-gam-inject-ads>
                </if>

                $ const profiles = getAsArray(content, 'profiles');
                <for|profile| of=profiles>
                  <marko-web-block class="page-contents__content-profile" tag=null>
                    $!{profile.body}
                  </marko-web-block>
                </for>

                <marko-web-content-body block-name=blockName obj=content attrs={ id: bodyId } />

                <if(displayTranscript)>
                  $ const transcriptId = `content-transcript-${content.id}`;
                  <if(shouldInjectAds)>
                    <theme-gam-inject-ads selector=`#${transcriptId}` detect-embeds=true>
                      <for|char| of=desktopCounts>
                        <!-- desktop/tablet only -->
                        <@inject
                          at=char
                          name="inline-content-desktop"
                          aliases=aliases
                          modifiers=["max-width-970", "margin-auto-x", "inline-content"]
                        />
                      </for>

                      <for|char| of=mobileCounts>
                        <!-- mobile only -->
                        <@inject
                          at=char
                          name="inline-content-mobile"
                          aliases=aliases
                          modifiers=["max-width-970", "margin-auto-x", "inline-content"]
                        />
                      </for>
                    </theme-gam-inject-ads>
                  </if>

                  <div id=`transcript-${id}` class="page-contents__content-transcript">
                    <marko-web-element block-name="page-contents" name="content-transcript-title">
                      <marko-web-icon name="file" modifiers=["lg"] /> Transcript
                    </marko-web-element>
                    <marko-web-content-transcript obj=content block-name=blockName attrs={ id: transcriptId }  />
                  </div>
                </if>

                <!-- needs input -->
                <if(input.afterBody)>
                  <${input.afterBody}
                    aliases=aliases
                    block-name=blockName
                    content=content
                  />
                </if>

                $ const sidebars = getAsArray(content, "sidebars");
                <marko-web-content-sidebars block-name=blockName obj={ sidebars } />
              </else>
            </marko-web-identity-x-access>

            <if(type === "document" || type === "whitepaper")>
              <theme-content-download obj=content>
                <@wufoo user-name=site.get("wufoo.userName") />
                <@link class="btn btn-primary" />
              </theme-content-download>
            </if>

            <if(type === "webinar")>
              <div class="mb-block" >
                $ const isUpcoming = content.startDate > Date.now();
                <theme-content-link-url
                  obj=content
                  label=(isUpcoming ? "Register for Webinar" : "View Webinar")
                  target="_blank"
                />
              </div>
            </if>
            <!-- <if(displayNewsletterSignup)>
              <global-newsletter-signup-banner-block />
            </if> -->

            <if(displaySocialShare)>
              <marko-web-social-sharing
                path=content.siteContext.path
                providers=["print", "facebook", "linkedin", "twitter", "pinterest"]
                print-path=`/print/content/${content.id}`
              />
            </if>

            <if(displayComments)>
              <theme-identity-x-comment-stream content=content />
            </if>

            <if(displayReadNext)>
              <theme-read-next-block
                content-id=id
                section-id=primarySection.id
                published=content.published
              />
            </if>
          </theme-page-contents>
        </div>
      </div>
      <div class="col-lg-4 page-rail">
        $ const excludeContentTypes = ["Contact", "Company", "Document", "TextAd", "Promotion"];
        <theme-latest-content-list-block
          title=`Latest in ${primarySection.name}`
          alias=primarySection.alias
          query-params={ excludeContentTypes }
        >
        <@native-x indexes=[0] name="default" aliases=aliases />
        </theme-latest-content-list-block>
        <!-- Only Fire when brightcove player is not included via content.embedCode -->
        <if(!content.embedCode)>
          <global-video-player />
        </if>
      </div>
    </div>
  </@section>

  <if(showBottomAdBlock)>
    <@section|{ aliases }|>
      <theme-gam-define-display-ad
        name="rotation"
        position="content_page"
        aliases=aliases
        modifiers=["inter-block"]
      />
    </@section>
  </if>

  <@section|{ content }|>
    <theme-related-stories-block
      content-id=content.id
      section-id=content.primarySection.id
      with-native-x=true
      native-x={ sectionName: "Sponsored" }
    />
  </@section>

  <for|s| of=sections>
    <@section|{ blockName, content, aliases }| modifiers=s.modifiers>
      <${s.renderBody}
        block-name=blockName
        content=content
        aliases=aliases
      />
    </@section>
  </for>
</global-content-wrapper-layout>
